---
layout: post
title:      "JS w/ Rails API Project"
date:       2021-02-10 19:58:51 +0000
permalink:  js_w_rails_api_project
---


## Plan and Design
For this project I had a hard time thinking about what I would build compared to the other three portfolio projects where I came up with an idea fairly quick. So I decided to search the web for single page application ideas. I found some good resources and a helpful [article](https://www.florin-pop.com/blog/2019/03/15-plus-app-ideas-to-build-to-level-up-your-coding-skills/) that had a project idea that caught my eye. It was a quiz app. I figured I'd like to make something that had to do with Computer Science and tech topics so a quiz application for coders is what I  decided to build. As usual I started to write down my ideas in a project planning notebook. I started with a description of what the app would be about and who it'd be for. I moved on to writing out user stories and what my models would be. Although many model ideas came to my head such as Category, Quiz, Question, AnswerChoices, ChosenAnswers, and User models I decided to keep it simple for now and stick with the most necessary ones which are the User, Quiz and Category models. Aftwerwards I had to think about the relationships of these models so I scribbled out a class diagram on notebook paper before copying it to draw.io to make it look a bit nicer. For the project requirements it says *" must include a resource with at least one has-many relationship."* so my quiz model would belong to a category which has many quizzes.

## Building MVP
To get started with building out my MVP (Minimum Viable Product) I Initialized a Github repo named coder_quiz. Like with all my other projects I always add a notes.md file to jot down my steps and build process before I start coding. For this project they recommended building out our application vertically meaning instead of building out everything horizontally like building all models and running all migrations off the bat it is better to build out one model and all its features from the ground up before moving on to the next one. I defintely kept this in mind as I went along though I sort of struggled to maintain this rule at times (*still learning!*). I also followed the workflow of creating a new branch for each new feature I was making, then merging it into main once I was done with it. Anyways to summarize how my building process went, I would build out all of my backend functionality for one model using RESTful conventions and always testing with seed data as I went along. Move on to the frontend using fetch requests to get the data from the backend, test what I was getting was the correct data I wanted by using debugging in the browser and console.log to see what exactly I was getting back from the server and if it was what I wanted I then handle it however I need to. For example in this case I was rendering my quizzes for each category to the dom with the data I recieved from my backend Rails API for categories and quizzes databases. Each time I'd have my frontend interact with the backend the interaction would be handled asynchronously by using fetch requests and for the format of communication I used the JSON format. After having my fetch requests working and everything coming together how I needed it to I'd clean up my code a bit  by following object oriented principles of encapsulating my related data and behavior. To do this I made Javascript classes for all my models and split up some of my index file functions into these classes making my project much more compact by having shorter less complex functions and not having it all bunched up inside one file. 

After building out my MVP I have a very basic version of my application up and running. Although I'd like to make it look much nicer and add much more to it I don't want to get caught up spending too much time when I need to move on to the next module so I will be submiting for project review and get ready for my assesment. *Wish me luck!*
