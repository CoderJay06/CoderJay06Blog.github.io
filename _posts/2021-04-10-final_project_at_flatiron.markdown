---
layout: post
title:      "Final Project at Flatiron"
date:       2021-04-10 13:55:18 +0000
permalink:  final_project_at_flatiron
---


After finishing up the final project requirements I'm starting to prepare for my final assessment. I've hustled my way through these last couple of weeks, racing against the clock to graduate with my program ending this month. Even though it's not the desired amount of time I would've liked to put into my final project, it has still been a positive learning experience overall. It came with the usual struggles of implementing newly learned concepts and bringing everything together into one final project at the end of a module. For this project build, it's required to use React and Redux on the frontend with a Rails API on the backend. I felt fairly confident with React and spent a lot of time diving into Javascript but still felt a bit shakey on Redux. I decided to make a Stock tracking app since I've been interested in the stock market and investing for a while. Plus I find that choosing to build something in a domain I'm especially interested in or have experience with can make starting a new project from scratch much less daunting. To begin my planning process I started with a large mug of coffee and a notebook labeled *Flatiron projects*. I wrote down all my thoughts and did the usual drawing out of my database design and user models for the backend. Figuring out the frontend design was a bit more complex as there are a lot of moving parts involved. Trying to think about exactly what components I'd need to render, how they would interact with each other, and how my application's state would be managed was just some of the forethought I had. For the UI I felt my user story should go something like the following, *As a user, I can view and search for the top trending stocks on the market. I can choose to signup for a new account and build a portfolio for tracking my favorite stocks*. So going off of that I knew I would have at least three models for my data. I named them simply as users, stocks, and portfolios. Having only these few to work with and keeping things simple from the start made the process of structuring my front end a bit easier. I think it's best to start small, even if you have a ton of ideas flowing right from the beginning. It makes for a smoother coding process in my opinion. To cut things short for this blog because I need to get back to work, I'll end by saying that building out my project how I want it has taken some trial and error. Some concepts had to be learned or relearned during the process, though that also drove me to dive deeper into things like [normalizing state shape](https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape) for relational data in redux or using [sessions](https://guides.rubyonrails.org/security.html#sessions) in rails for example.  Attending open office hours has also been a great learning resource with this project. The instructor for this section is really knowledgeable and super helpful. Anyway, it has for sure been one of the more difficult and stressful projects to work through for me with a few roadblocks along the way. Dealing with some personal health issues and a program expiration date closing in didn't help things, but I'm determined to push through and make it to the next stage (Career prep!).
